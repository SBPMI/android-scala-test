{"name":"Scala on Android","body":"This is a simple proof-of-concept for an Android project using [Scala](http://www.scala-lang.org/)\r\nand [Maven](http://code.google.com/p/maven-android-plugin/). It is only slightly\r\nmore complicated than \"Hello World\".\r\n\r\nCurrently, this project targets Scala 2.9.2. You can use it in two ways:\r\n\r\n1. Just clone and build the project (setup and build instructions are below) to see a working\r\n   proof-of-concept of using Scala to create Android apps.\r\n\r\n2. Fork the project and use it as a base for an Android app that you would like to write in Scala.\r\n\r\nWhy?\r\n----\r\nThere's a few reasons for this project:\r\n\r\n* Building Scala for Android requires specific [ProGuard](http://developer.android.com/guide/developing/tools/proguard.html)\r\n  [configuration](http://proguard.sourceforge.net/index.html#manual/usage.html) in order to bring the built\r\n  app down to a reasonable size (or even a size that works with Dalvik), while not accidentally\r\n  optimizing away necessary dependencies.\r\n\r\n* Using Maven provides a repeatable and portable build process, but the pom.xml needed to use\r\n  the [android-maven-plugin](http://code.google.com/p/maven-android-plugin/) with Scala is not\r\n  entirely obvious.\r\n\r\n* Other projects like this exist, but they are targeting outdated versions of android-maven-plugin,\r\n  older versions of Scala, missing features like release-mode APK signing, or simply don't work for\r\n  other reasons.\r\n\r\nThe \"why\" of using Scala instead of Java is beyond the scope of this document, though.\r\n\r\nRoadmap\r\n-------\r\n* Package this project into a Maven archetype. This would make it easy to start brand new Scala on\r\n  Android projects by just running `mvn archetype:generate`.\r\n\r\n* Add a skeleton of some sort for adding unit tests.\r\n\r\nPrerequisites\r\n-------------\r\n* Maven 3 (`brew install maven` or `apt-get install maven3`)\r\n* Android SDK\r\n\r\nSetup\r\n-----\r\n1. If you don't have the Android SDK, it is available at:\r\n   [http://developer.android.com/sdk/](http://developer.android.com/sdk/)\r\n\r\n   Note that after you download the SDK starter package from the link\r\n   above, you must use the installer to install the version of the\r\n   Android SDK targeted by the app. As of the time of this writing,\r\n   that is Android 2.2.\r\n\r\n   After you have the Android SDK installed, set the `ANDROID_HOME`\r\n   environment variable. For example, on my machine:\r\n\r\n        $ export ANDROID_HOME=/opt/google/android-sdk\r\n\r\n   The location of the SDK is likely to be different on your machine.\r\n\r\n2. Deploy the Android SDK to your local Maven repository:\r\n   \r\n        $ cd /tmp\r\n        $ export ANDROID_HOME=<your-android-sdk-path>\r\n        $ git clone https://github.com/mosabua/maven-android-sdk-deployer.git\r\n        $ cd maven-android-sdk-deployer\r\n        $ mvn install -P 2.2\r\n\r\n   The `-P 2.2` in the final command specifies the version of the\r\n   Android SDK to deploy. As of the time of this writing, the app\r\n   targets the 2.2 SDK.\r\n\r\n   The deployer may fail due to being unable to find certain files. If this\r\n   happens: (a) make sure you have the `$ANDROID_HOME` location properly set\r\n   and (b) open the Android SDK tool and make sure you have the necessary\r\n   SDK's and API versions downloaded.\r\n \r\n   If the deployer complains that a file is missing, look closely at\r\n   the path. You may have the same file but in a path where some of\r\n   the hyphens are instead underscores. If this is the case, just link\r\n   the path that the deployer is searching for to the correct one.\r\n \r\n3. Install libraries to local repository:\r\n\r\n        $ chmod +x install-libs.sh\r\n        $ ./install-libs.sh\r\n\r\n4. If you are using OS X, also run:\r\n\r\n        $ ./link-jars-for-osx.sh\r\n\r\nBuild\r\n-----\r\nYou can build using Maven:\r\n\r\n    $ mvn clean install\r\n\r\nThis will compile the project and generate an APK. The generated APK is\r\nsigned with the Android debug certificate. To generate a zip-aligned APK\r\nthat is signed with an actual certificate, use:\r\n\r\n    $ mvn clean install -Prelease\r\n\r\nThe configuration for which certificate to use is in pom.xml.\r\n\r\nRun\r\n---\r\nSetup and start an Android virtual device, or connect a dev device.\r\nYou can setup and run virtual device using:\r\n\r\n    $ <your-android-sdk-path>/bin/android avd\r\n\r\nDeploy to the virtual/dev device:\r\n\r\n    $ mvn android:deploy\r\n\r\nUsing an IDE\r\n------------\r\nYou can use Maven to generate project files for Eclipse or IDEA:\r\n\r\n    $ mvn eclipse:eclipse\r\n    $ mvn idea:idea\r\n\r\nOnce the project files are generated, your IDE should be able to open\r\nthe project. Depending on your IDE's configuration, it may not be able\r\nto build the project. You can always build using the Maven command line\r\nas detailed in this readme.\r\n\r\nFurther Reading\r\n---------------\r\n- [Android Maven Plugin](http://code.google.com/p/maven-android-plugin/)\r\n","tagline":"Simple proof-of-concept for an Android project using Scala and Maven.","google":"UA-17515286-1","note":"Don't delete this file! It's used internally to help with page regeneration."}